{
    "data" : [
        "\nR Under development (unstable) (2016-10-26 r71594) -- \"Unsuffered Consequences\"\nCopyright (C) 2016 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(scDD)",
        "> ",
        "sessionInfo()",
        "R Under development (unstable) (2016-10-26 r71594)\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\nRunning under: macOS Sierra 10.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] scDD_0.99.0\n\nloaded via a namespace (and not attached):\n [1] Rcpp_0.12.8         nloptr_1.0.4        plyr_1.8.4          outliers_0.14       bitops_1.0-6       \n [6] tools_3.4.0        ",
        " mclust_5.2          testthat_1.0.2      lme4_1.1-12         tibble_1.2         \n[11] gtable_0.2.0        nlme_3.1-128        lattice_0.20-34     blockmodeling_0.1.8 Matrix_1.2-7.1     \n[16] parallel_3.4.0      spam_1.4-0          coda_0.18-1         maps_3.1.1          gtools_3.5.0       \n[21] caTools_1.17.1      fields_8.4-1        grid_3.4.0          Biobase_2.35.0      R6_2.2.0           \n[26] BiocParallel_1.9.2  arm_1.9-3           gdata_2.17.0        EBSeq_1.15.0        minqa_1.2.4        \n[31] ggplot2_2.2.0      ",
        " magrittr_1.5        scales_0.4.1        gplots_3.0.1        BiocGenerics_0.21.1\n[36] MASS_7.3-45         splines_3.4.0       assertthat_0.1      abind_1.4-5         colorspace_1.3-1   \n[41] KernSmooth_2.23-15  lazyeval_0.2.0      munsell_0.4.3       crayon_1.3.2       \n",
        "> ",
        "data(scDatExSim)",
        "> ",
        "class(scDatExSim)",
        "[1] \"ExpressionSet\"\nattr(,\"package\")\n[1] \"Biobase\"\n",
        "> ",
        "dim(scDatExSim)",
        "Features  Samples \n      30      200 \n",
        "> ",
        "prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)",
        "> ",
        "scDD",
        "function (SCdat, prior_param = list(alpha = 0.1, mu0 = 0, s0 = 0.01, \n    a0 = 0.01, b0 = 0.01), permutations = 0, testZeroes = TRUE, \n    adjust.perms = FALSE, n.cores = parallel::detectCores(), \n    parallelBy = c(\"Genes\", \"Permutations\"), condition = \"condition\", \n    min.size = 3) \n{\n    if (!(\"ExpressionSet\" %in% class(SCdat))) {\n        stop(\"Please provide a valid 'ExpressionSet' object.\")\n    }\n    parallelBy <- match.arg(parallelBy)\n    alpha = prior_param$alpha\n    m0 = prior_param$mu0\n    s0 = prior_param$s0\n",
        "    a0 = prior_param$a0\n    b0 = prior_param$b0\n    if (length(unique(phenoData(SCdat)[[condition]])) != 2 | \n        length(phenoData(SCdat)[[condition]]) != ncol(exprs(SCdat))) {\n        stop(\"Error: Please specify valid condition labels.\")\n    }\n    ref <- unique(phenoData(SCdat)[[condition]])[1]\n    tofit <- which((rowSums(exprs(SCdat)[, phenoData(SCdat)[[condition]] == \n        ref] > 0) >= max(min.size, 2)) & (rowSums(exprs(SCdat)[, \n        phenoData(SCdat)[[condition]] != ref] > 0) >= max(min.size, \n",
        "        2)))\n    if (length(tofit) < nrow(exprs(SCdat))) {\n        if (testZeroes) {\n            message(\"Notice: There exist genes that are all (or almost all) zero. \\n              For genes with 0 or 1 nonzero measurements per condition, \\n              only testing for DZ\")\n        }\n        else {\n            message(\"Notice: There exist genes that are all (or almost all) zero. \\n              Skipping genes with 0 or 1 nonzero measurements per condition\")\n        }\n    }\n    skipConstant <- which(apply(exprs(SCdat)[tofit, phenoData(SCdat)[[condition]] == \n",
        "        ref], 1, function(x) length(unique(x[x > 0])) == 1) | \n        apply(exprs(SCdat)[tofit, phenoData(SCdat)[[condition]] != \n            ref], 1, function(x) length(unique(x[x > 0])) == \n            1))\n    if (length(skipConstant) > 0) {\n        if (testZeroes) {\n            message(\"Notice: There exist genes with constant nonzero values. \\n              These genes will only be considered for the DZ pattern.\")\n        }\n        else {\n            message(\"Notice: There exist genes with constant nonzero values. \\n              Skipping these genes.\")\n",
        "        }\n        tofit <- tofit[-skipConstant]\n    }\n    message(\"Clustering observed expression data for each gene\")\n    message(paste0(\"Setting up parallel back-end using \", n.cores, \n        \" cores\"))\n    BiocParallel::register(BPPARAM = BiocParallel::MulticoreParam(workers = n.cores))\n    oa <- c1 <- c2 <- vector(\"list\", nrow(exprs(SCdat)[tofit, \n        ]))\n    bf <- den <- comps.all <- comps.c1 <- comps.c2 <- rep(NA, \n        nrow(exprs(SCdat)[tofit, ]))\n    if (permutations == 0) {\n        genefit <- function(y) {\n",
        "            cond0 <- phenoData(SCdat)[[condition]][y > 0]\n            y <- log(y[y > 0])\n            oa <- mclustRestricted(y, restrict = TRUE, min.size = min.size)\n            c1 <- mclustRestricted(y[cond0 == ref], restrict = TRUE, \n                min.size = min.size)\n            c2 <- mclustRestricted(y[cond0 != ref], restrict = TRUE, \n                min.size = min.size)\n            return(list(oa = oa, c1 = c1, c2 = c2))\n        }\n        out <- bplapply(1:nrow(exprs(SCdat)[tofit, ]), function(x) genefit(exprs(SCdat)[tofit[x], \n",
        "            ]))\n        oa <- lapply(out, function(x) x[[\"oa\"]])\n        c1 <- lapply(out, function(x) x[[\"c1\"]])\n        c2 <- lapply(out, function(x) x[[\"c2\"]])\n        rm(out)\n        gc()\n        comps.all <- unlist(lapply(oa, function(x) luOutlier(x$class, \n            min.size)))\n        comps.c1 <- unlist(lapply(c1, function(x) luOutlier(x$class, \n            min.size)))\n        comps.c2 <- unlist(lapply(c2, function(x) luOutlier(x$class, \n            min.size)))\n        message(\"Notice! Number of permutations is set to zero; using \\n            Kolmogorov-Smirnov to test for differences in distributions\\n            instead of the Bayes Factor permutation test\")\n",
        "        res_ks <- testKS(exprs(SCdat)[tofit, ], phenoData(SCdat)[[condition]], \n            inclZero = FALSE)\n        if (testZeroes) {\n            sig <- which(res_ks$p < 0.025)\n        }\n        else {\n            sig <- which(res_ks$p < 0.05)\n        }\n        pvals <- res_ks$p.unadj\n    }\n    else {\n        genefit <- function(y) {\n            cond0 <- phenoData(SCdat)[[condition]][y > 0]\n            y <- log(y[y > 0])\n            oa <- mclustRestricted(y, restrict = TRUE, min.size = min.size)\n            c1 <- mclustRestricted(y[cond0 == ref], restrict = TRUE, \n",
        "                min.size = min.size)\n            c2 <- mclustRestricted(y[cond0 != ref], restrict = TRUE, \n                min.size = min.size)\n            bf <- jointPosterior(y[cond0 == ref], c1, alpha, \n                m0, s0, a0, b0) + jointPosterior(y[cond0 != ref], \n                c2, alpha, m0, s0, a0, b0)\n            den <- jointPosterior(y, oa, alpha, m0, s0, a0, b0)\n            return(list(oa = oa, c1 = c1, c2 = c2, bf = bf, den = den))\n        }\n        out <- bplapply(1:nrow(exprs(SCdat)[tofit, ]), function(x) genefit(exprs(SCdat)[tofit[x], \n",
        "            ]))\n        oa <- lapply(out, function(x) x[[\"oa\"]])\n        c1 <- lapply(out, function(x) x[[\"c1\"]])\n        c2 <- lapply(out, function(x) x[[\"c2\"]])\n        bf <- unlist(lapply(out, function(x) x[[\"bf\"]]))\n        den <- unlist(lapply(out, function(x) x[[\"den\"]]))\n        rm(out)\n        gc()\n        comps.all <- unlist(lapply(oa, function(x) luOutlier(x$class, \n            min.size)))\n        comps.c1 <- unlist(lapply(c1, function(x) luOutlier(x$class, \n            min.size)))\n        comps.c2 <- unlist(lapply(c2, function(x) luOutlier(x$class, \n",
        "            min.size)))\n        message(\"Performing permutations to evaluate independence of clustering\\n              and condition for each gene\")\n        message(paste0(\"Parallelizing by \", parallelBy))\n        bf.perm <- vector(\"list\", nrow(exprs(SCdat)[tofit, ]))\n        names(bf.perm) <- rownames(exprs(SCdat)[tofit, ])\n        if (parallelBy == \"Permutations\") {\n            if (adjust.perms) {\n                C <- apply(exprs(SCdat)[tofit, ], 2, function(x) sum(x > \n                  0)/length(x))\n                t1 <- proc.time()\n",
        "                for (g in 1:nrow(exprs(SCdat)[tofit, ])) {\n                  bf.perm[[g]] <- permMclustCov(exprs(SCdat)[tofit[g], \n                    ], permutations, C, phenoData(SCdat)[[condition]], \n                    remove.zeroes = TRUE, log.transf = TRUE, \n                    restrict = TRUE, min.size = min.size, alpha, \n                    m0, s0, a0, b0, ref)\n                  if (g%%1000 == 0) {\n                    t2 <- proc.time()\n                    message(paste0(g, \" genes completed at \", \n                      date(), \", took \", round((t2 - t1)[3]/60, \n",
        "                        2), \" minutes\"))\n                    t1 <- t2\n                  }\n                }\n            }\n            else {\n                t1 <- proc.time()\n                for (g in 1:nrow(exprs(SCdat)[tofit, ])) {\n                  bf.perm[[g]] <- permMclust(exprs(SCdat[tofit[g], \n                    ]), permutations, phenoData(SCdat)[[condition]], \n                    remove.zeroes = TRUE, log.transf = TRUE, \n                    restrict = TRUE, min.size = min.size, alpha, \n                    m0, s0, a0, b0, ref)\n",
        "                  if (g%%1000 == 0) {\n                    t2 <- proc.time()\n                    message(paste0(g, \" genes completed at \", \n                      date(), \", took \", round((t2 - t1)[3]/60, \n                        2), \" minutes\"))\n                    t1 <- t2\n                  }\n                }\n            }\n        }\n        else if (parallelBy == \"Genes\") {\n            C <- apply(exprs(SCdat)[tofit, ], 2, function(x) sum(x > \n                0)/length(x))\n            bf.perm <- bplapply(1:nrow(exprs(SCdat)[tofit, ]), \n",
        "                function(x) permMclustGene(exprs(SCdat)[tofit[x], \n                  ], adjust.perms, permutations, phenoData(SCdat)[[condition]], \n                  remove.zeroes = TRUE, log.transf = TRUE, restrict = TRUE, \n                  min.size = min.size, alpha, m0, s0, a0, b0, \n                  C, ref))\n        }\n        else {\n            stop(\"Please specify either 'Permutations' or 'Genes' to \\n                 parallelize by using the parallelizeBy argument\")\n        }\n        if (adjust.perms) {\n",
        "            pvals <- sapply(1:nrow(exprs(SCdat)[tofit, ]), function(x) sum(bf.perm[[x]] > \n                bf[x] - den[x]))/(permutations)\n        }\n        else {\n            pvals <- sapply(1:nrow(exprs(SCdat)[tofit, ]), function(x) sum(bf.perm[[x]] > \n                bf[x]))/(permutations)\n        }\n        if (testZeroes) {\n            sig <- which(p.adjust(pvals, method = \"BH\") < 0.025)\n        }\n        else {\n            sig <- which(p.adjust(pvals, method = \"BH\") < 0.05)\n        }\n    }\n    message(\"Classifying significant genes into patterns\")\n",
        "    dd.cats <- classifyDD(exprs(SCdat)[tofit, ], phenoData(SCdat)[[condition]], \n        sig, oa, c1, c2, alpha = alpha, m0 = m0, s0 = s0, a0 = a0, \n        b0 = b0, log.nonzero = TRUE, ref = ref, min.size = min.size)\n    cats <- rep(\"NS\", nrow(exprs(SCdat)[tofit, ]))\n    cats[sig] <- dd.cats\n    extraDP <- feDP(exprs(SCdat)[tofit, ], phenoData(SCdat)[[condition]], \n        sig, oa, c1, c2, log.nonzero = TRUE, testZeroes = testZeroes, \n        adjust.perms = adjust.perms, min.size = min.size)\n    cats[-sig] <- names(extraDP)\n",
        "    if (testZeroes) {\n        NCs <- which(p.adjust(pvals, method = \"BH\") > 0.025 & \n            cats == \"NC\")\n    }\n    else {\n        NCs <- which(p.adjust(pvals, method = \"BH\") > 0.05 & \n            cats == \"NC\")\n    }\n    NC.cats <- classifyDD(exprs(SCdat)[tofit, ], phenoData(SCdat)[[condition]], \n        NCs, oa, c1, c2, alpha = alpha, m0 = m0, s0 = s0, a0 = a0, \n        b0 = b0, log.nonzero = TRUE, ref = ref, min.size = min.size)\n    cats[NCs] <- NC.cats\n    cats.all <- pvals.all <- rep(NA, nrow(exprs(SCdat)))\n",
        "    cats.all[tofit] <- cats\n    pvals.all[tofit] <- pvals\n    ns <- which(!(cats.all %in% c(\"DE\", \"DP\", \"DM\", \"DB\")))\n    pvals.z <- rep(NA, nrow(exprs(SCdat)))\n    if (testZeroes) {\n        ztest <- testZeroes(exprs(SCdat), phenoData(SCdat)[[condition]], \n            ns)\n        pvals.z[ns] <- ztest\n        cats.all[p.adjust(pvals.z, method = \"BH\") < 0.025] <- \"DZ\"\n        cats.all[p.adjust(pvals.z, method = \"BH\") >= 0.025] <- \"NS\"\n    }\n    MAP1 <- matrix(1, nrow = nrow(exprs(SCdat)), ncol = sum(phenoData(SCdat)[[condition]] == \n",
        "        ref))\n    MAP2 <- matrix(1, nrow = nrow(exprs(SCdat)), ncol = sum(phenoData(SCdat)[[condition]] != \n        ref))\n    MAP <- matrix(1, nrow = nrow(exprs(SCdat)), ncol = ncol(exprs(SCdat)))\n    rownames(MAP1) <- rownames(MAP2) <- rownames(MAP) <- featureNames(SCdat)\n    colnames(MAP1) <- sampleNames(SCdat[, phenoData(SCdat)[[condition]] == \n        ref])\n    colnames(MAP2) <- sampleNames(SCdat[, phenoData(SCdat)[[condition]] != \n        ref])\n    colnames(MAP) <- sampleNames(SCdat)\n    MAP1[exprs(SCdat)[, phenoData(SCdat)[[condition]] == ref] == \n",
        "        0] <- 0\n    MAP2[exprs(SCdat)[, phenoData(SCdat)[[condition]] != ref] == \n        0] <- 0\n    MAP[exprs(SCdat) == 0] <- 0\n    for (g in 1:nrow(exprs(SCdat)[tofit, ])) {\n        MAP1[tofit[g], ][exprs(SCdat[tofit[g], phenoData(SCdat)[[condition]] == \n            ref]) != 0] <- c1[[g]]$class + 1\n        MAP2[tofit[g], ][exprs(SCdat[tofit[g], phenoData(SCdat)[[condition]] != \n            ref]) != 0] <- c2[[g]]$class + 1\n        MAP[tofit[g], ][exprs(SCdat[tofit[g], ]) != 0] <- oa[[g]]$class + \n            1\n",
        "    }\n    comps.all.ALL <- comps.c1.ALL <- comps.c2.ALL <- rep(NA, \n        nrow(exprs(SCdat)))\n    comps.all.ALL[tofit] <- comps.all\n    comps.c1.ALL[tofit] <- comps.c1\n    comps.c2.ALL[tofit] <- comps.c2\n    return(list(Genes = data.frame(gene = rownames(SCdat), nonzero.pvalue = pvals.all, \n        nonzero.pvalue.adj = p.adjust(pvals.all, method = \"BH\"), \n        zero.pvalue = pvals.z, zero.pvalue.adj = p.adjust(pvals.z, \n            method = \"BH\"), DDcategory = cats.all, Clusters.combined = comps.all.ALL, \n",
        "        Clusters.c1 = comps.c1.ALL, Clusters.c2 = comps.c2.ALL), \n        Zhat.combined = MAP, Zhat.c1 = MAP1, Zhat.c2 = MAP2))\n}\n<environment: namespace:scDD>\n",
        "> ",
        "RES <- scDD(scDatExSim, prior_param=prior_param, testZeroes=FALSE)",
        "Clustering observed expression data for each gene\n",
        "Setting up parallel back-end using 4 cores\n",
        "\n",
        "> ",
        "BiocParallel::register(BPPARAM = ",
        "+ ",
        "                           BiocParallel::MulticoreParam(workers=n.cores))",
        "Error in BiocParallel::MulticoreParam(workers = n.cores) : \n  object 'n.cores' not found\n",
        "> ",
        "n.cores <- 2",
        "> ",
        "BiocParallel::register(BPPARAM = ",
        "+ ",
        "                           BiocParallel::MulticoreParam(workers=n.cores))",
        "> ",
        "show(scDatExSim)",
        "ExpressionSet (storageMode: lockedEnvironment)\nassayData: 30 features, 200 samples \n  element names: exprs \nprotocolData: none\nphenoData\n  sampleNames: Sample1 Sample2 ... Sample200 (200 total)\n  varLabels: condition\n  varMetadata: labelDescription\nfeatureData: none\nexperimentData: use 'experimentData(object)'\nAnnotation:  \n",
        "> ",
        "closeAllConnections()",
        "> ",
        "closeAllConnections()",
        "> ",
        "",
        "> ",
        "closeAllConnections()",
        "> ",
        "?BiocParallel",
        "> ",
        "?register",
        "> ",
        "registered()",
        "Error: could not find function \"registered\"\n",
        "> ",
        "BiocParallel:::registered()",
        "$MulticoreParam\nclass: MulticoreParam\n  bpisup: FALSE; bpnworkers: 2; bptasks: 0; bpjobname: BPJOB\n  bplog: FALSE; bpthreshold: INFO; bpstopOnError: TRUE\n  bptimeout: 2592000; bpprogressbar: FALSE\n  bpRNGseed: \n  bplogdir: NA\n  bpresultdir: NA\n  cluster type: FORK\n\n$SnowParam\nclass: SnowParam\n  bpisup: FALSE; bpnworkers: 2; bptasks: 0; bpjobname: BPJOB\n  bplog: FALSE; bpthreshold: INFO; bpstopOnError: TRUE\n  bptimeout: 2592000; bpprogressbar: FALSE\n  bpRNGseed: \n  bplogdir: NA\n  bpresultdir: NA\n  cluster type: ",
        "SOCK\n\n$SerialParam\nclass: SerialParam\n  bpisup: TRUE; bpnworkers: 1; bptasks: 0; bpjobname: BPJOB\n  bplog: FALSE; bpthreshold: INFO; bpstopOnError: TRUE\n  bptimeout: 2592000; bpprogressbar: FALSE\n  bplogdir: NA\n\n",
        "> ",
        "RES <- scDD(scDatExSim, prior_param=prior_param, testZeroes=FALSE)",
        "Clustering observed expression data for each gene\n",
        "Setting up parallel back-end using 4 cores\n",
        "\n",
        "> ",
        "str(RES)",
        "Error in str(RES) : object 'RES' not found\n",
        "> ",
        "message(\"Notice! Number of permutations is set to zero; using ",
        "+ ",
        "            Kolmogorov-Smirnov to test for differences in distributions",
        "+ ",
        "            instead of the Bayes Factor permutation test\")",
        "Notice! Number of permutations is set to zero; using \n            Kolmogorov-Smirnov to test for differences in distributions\n            instead of the Bayes Factor permutation test\n",
        "> ",
        "BiocParallel::register(BPPARAM = ",
        "+ ",
        "                           BiocParallel::MulticoreParam(workers=1))",
        "> ",
        "data(scDatExSim)",
        "> ",
        "class(scDatExSim)",
        "[1] \"ExpressionSet\"\nattr(,\"package\")\n[1] \"Biobase\"\n",
        "> ",
        "dim(scDatExSim)",
        "Features  Samples \n      30      200 \n",
        "> ",
        "prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)",
        "> ",
        "data(scDatEx)",
        "> ",
        "class(scDatEx)",
        "[1] \"ExpressionSet\"\nattr(,\"package\")\n[1] \"Biobase\"\n",
        "> ",
        "dim(scDatEx)",
        "Features  Samples \n     500      142 \n",
        "> ",
        "nDE <- 5",
        "> ",
        "nDP <- 5",
        "> ",
        "nDM <- 5",
        "> ",
        "nDB <- 5",
        "> ",
        "nEE <- 5",
        "> ",
        "nEP <- 5",
        "> ",
        "numSamples <- 100",
        "> ",
        "seed <- 816",
        "> ",
        "SD <- simulateSet(scDatEx, numSamples=numSamples, ",
        "+ ",
        "                  nDE=nDE, nDP=nDP, nDM=nDM, nDB=nDB, ",
        "+ ",
        "                  nEE=nEE, nEP=nEP, sd.range=c(2,2), modeFC=4, plots=FALSE, ",
        "+ ",
        "                  random.seed=seed)",
        "Identifying a set of genes to simulate from...\n",
        "Simulating DE fold changes...\n",
        "Simulating individual genes...\n",
        "Done! Simulated 5 DE, 5 DP, 5 DM, 5 DB, 5 EE, and 5 EP genes \n",
        "> ",
        "str(SD)",
        "List of 2\n $ Simulated_Data: num [1:30, 1:200] 0 0 22.04 8.83 1.01 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:30] \"DE\" \"DE\" \"DE\" \"DE\" ...\n  .. ..$ : NULL\n $ FC            : Named num [1:30] 1 1 1 1 1 4 4 4 4 4 ...\n  ..- attr(*, \"names\")= chr [1:30] \"DE\" \"DE\" \"DE\" \"DE\" ...\n",
        "> ",
        "condition <- c(rep(1, numSamples), rep(2, numSamples))",
        "> ",
        "rownames(SD[[1]]) <- paste0(rownames(SD[[1]]), 1:nrow(SD[[1]]), sep=\"\")",
        "> ",
        "colnames(SD[[1]]) <- names(condition) <- paste0(\"Sample\", ",
        "+ ",
        "                                                1:ncol(SD[[1]]), sep=\"\")",
        "> ",
        "SDExpressionSet <- ExpressionSet(assayData=SD[[1]], ",
        "+ ",
        "                    phenoData=as(data.frame(condition), \"AnnotatedDataFrame\"))",
        "Error: could not find function \"ExpressionSet\"\n",
        "> ",
        "library(Biobase)",
        "Loading required package: BiocGenerics\n",
        "Loading required package: parallel\n",
        "\nAttaching package: ‘BiocGenerics’\n\n",
        "The following objects are masked from ‘package:parallel’:\n\n    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport, clusterMap, parApply,\n    parCapply, parLapply, parLapplyLB, parRapply, parSapply, parSapplyLB\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    IQR, mad, sd, var, xtabs\n\n",
        "The following objects are masked from ‘package:base’:\n\n    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames, colSums, do.call, duplicated,\n    eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, lengths, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce,\n    rowMeans, rownames, rowSums, sapply, setdiff, sort, table, tapply, union, unique, unsplit, which,\n    which.max, which.min\n\n",
        "Welcome to Bioconductor\n\n    Vignettes contain introductory material; view with 'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n",
        "> ",
        "SDExpressionSet <- ExpressionSet(assayData=SD[[1]], ",
        "+ ",
        "                    phenoData=as(data.frame(condition), \"AnnotatedDataFrame\"))",
        "> ",
        "data(scDatExList)",
        "> ",
        "str(scDatExList)",
        "List of 2\n $ C1: num [1:100, 1:78] 0 53.3 0 2 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:100] \"MKL2\" \"CD109\" \"ABTB1\" \"MAST2\" ...\n  .. ..$ : chr [1:78] \"C1.073\" \"C1.074\" \"C1.075\" \"C1.076\" ...\n $ C2: num [1:100, 1:64] 6 17 0 0 0 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:100] \"MKL2\" \"CD109\" \"ABTB1\" \"MAST2\" ...\n  .. ..$ : chr [1:64] \"C2.001\" \"C2.002\" \"C2.003\" \"C2.004\" ...\n",
        "> ",
        "condition.names <- names(scDatExList)",
        "> ",
        "scDatExMat <- preprocess(scDatExList, ConditionNames=condition.names, ",
        "+ ",
        "                        zero.thresh=1, median_norm=FALSE)",
        "> ",
        "scDatExMatNormThresh <- preprocess(scDatExList, ConditionNames=condition.names, ",
        "+ ",
        "                                   zero.thresh=0.75, median_norm=TRUE)",
        "> ",
        "data(scDatExSim)",
        "> ",
        "de <- sideViolin(exprs(scDatExSim)[1,], scDatExSim$condition, ",
        "+ ",
        "           title.gene=featureNames(scDatExSim)[1])",
        "> ",
        "de",
        "> ",
        "data(scDatExSim)",
        "> ",
        "show(scDatExSim)",
        "ExpressionSet (storageMode: lockedEnvironment)\nassayData: 30 features, 200 samples \n  element names: exprs \nprotocolData: none\nphenoData\n  sampleNames: Sample1 Sample2 ... Sample200 (200 total)\n  varLabels: condition\n  varMetadata: labelDescription\nfeatureData: none\nexperimentData: use 'experimentData(object)'\nAnnotation:  \n",
        "> ",
        "prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)",
        "> ",
        "RES <- scDD(scDatExSim, prior_param=prior_param, testZeroes=FALSE)",
        "Clustering observed expression data for each gene\n",
        "Setting up parallel back-end using 4 cores\n",
        "\n",
        "> ",
        "SCdat <- scDatExSim",
        "> ",
        "permutations=0",
        "> ",
        "testZeroes <- FALSE",
        "> ",
        "adjust.perms=FALSE",
        "> ",
        "n.cores=parallel::detectCores()",
        "> ",
        "n.cores",
        "[1] 4\n",
        "> ",
        "parallelBy <- \"Genes\"",
        "> ",
        "condition <- \"condition\"",
        "> ",
        "min.size <- 3",
        "> ",
        "if(!(\"ExpressionSet\" %in% class(SCdat))){",
        "+ ",
        "    stop(\"Please provide a valid 'ExpressionSet' object.\")",
        "+ ",
        "  }",
        "> ",
        "alpha = prior_param$alpha",
        "> ",
        "  m0 = prior_param$mu0",
        "> ",
        "  s0 = prior_param$s0",
        "> ",
        "  a0 = prior_param$a0",
        "> ",
        "  b0 = prior_param$b0",
        "> ",
        "if (length(unique(phenoData(SCdat)[[condition]])) != 2 | ",
        "+ ",
        "      length(phenoData(SCdat)[[condition]]) != ncol(exprs(SCdat))){",
        "+ ",
        "    stop(\"Error: Please specify valid condition labels.\")",
        "+ ",
        "  }",
        "> ",
        "  ",
        "> ",
        "  # reference category/condition - the first listed one",
        "> ",
        "  ref <- unique(phenoData(SCdat)[[condition]])[1]",
        "> ",
        "ref",
        "[1] 1\n",
        "> ",
        "tofit <- which(",
        "+ ",
        "           (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) >= ",
        "+ ",
        "             max(min.size,2)) &",
        "+ ",
        "           (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) >= ",
        "+ ",
        "              max(min.size,2)))",
        "> ",
        "tofit",
        " DE1  DE2  DE3  DE4  DE5  DP6  DP7  DP8  DP9 DP10 DM11 DM12 DM13 DM14 DM15 DB16 DB17 DB18 DB19 DB20 EP21 EP22 EP23 \n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23 \nEP24 EP25 EE26 EE27 EE28 EE29 EE30 \n  24   25   26   27   28   29   30 \n",
        "> ",
        "if (length(tofit) < nrow(exprs(SCdat))){",
        "+ ",
        "    if(testZeroes){",
        "+ ",
        "      message(\"Notice: There exist genes that are all (or almost all) zero. ",
        "+ ",
        "              For genes with 0 or 1 nonzero measurements per condition, ",
        "+ ",
        "              only testing for DZ\")    ",
        "+ ",
        "    }else{",
        "+ ",
        "      message(\"Notice: There exist genes that are all (or almost all) zero. ",
        "+ ",
        "              Skipping genes with 0 or 1 nonzero measurements per condition\")",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "skipConstant <- which( ",
        "+ ",
        "                apply(exprs(SCdat)[tofit,phenoData(SCdat)[[condition]]==ref], 1,",
        "+ ",
        "                                function(x) length(unique(x[x>0])) == 1) |",
        "+ ",
        "                apply(exprs(SCdat)[tofit,phenoData(SCdat)[[condition]]!=ref], 1,",
        "+ ",
        "                                function(x) length(unique(x[x>0])) == 1) )",
        "> ",
        "  if (length(skipConstant) > 0){",
        "+ ",
        "    if(testZeroes){",
        "+ ",
        "      message(\"Notice: There exist genes with constant nonzero values. ",
        "+ ",
        "              These genes will only be considered for the DZ pattern.\")    ",
        "+ ",
        "    }else{",
        "+ ",
        "      message(\"Notice: There exist genes with constant nonzero values. ",
        "+ ",
        "              Skipping these genes.\")    ",
        "+ ",
        "    }",
        "+ ",
        "    tofit <- tofit[-skipConstant]",
        "+ ",
        "  }",
        "> ",
        "message(\"Clustering observed expression data for each gene\")",
        "Clustering observed expression data for each gene\n",
        "> ",
        "  message(paste0(\"Setting up parallel back-end using \", n.cores, \" cores\" ))",
        "Setting up parallel back-end using 4 cores\n",
        "> ",
        "  BiocParallel::register(BPPARAM = ",
        "+ ",
        "                           BiocParallel::MulticoreParam(workers=n.cores))",
        "> ",
        "  ",
        "> ",
        "  oa <- c1 <- c2 <- vector(\"list\", nrow(exprs(SCdat)[tofit,]))",
        "> ",
        "  bf <- den <- comps.all <- ",
        "+ ",
        "    comps.c1 <- comps.c2 <- rep(NA, nrow(exprs(SCdat)[tofit,]))",
        "> ",
        "permutations",
        "[1] 0\n",
        "> ",
        "genefit <- function(y){",
        "+ ",
        "      cond0 <- phenoData(SCdat)[[condition]][y>0]",
        "+ ",
        "      y <- log(y[y>0])",
        "+ ",
        "      ",
        "+ ",
        "      oa <- mclustRestricted(y, restrict=TRUE, min.size=min.size)",
        "+ ",
        "      c1 <- mclustRestricted(y[cond0==ref], restrict=TRUE, min.size=min.size)",
        "+ ",
        "      c2 <- mclustRestricted(y[cond0!=ref], restrict=TRUE, min.size=min.size)",
        "+ ",
        "    ",
        "+ ",
        "      return(list(",
        "+ ",
        "        oa=oa,",
        "+ ",
        "        c1=c1,",
        "+ ",
        "        c2=c2",
        "+ ",
        "      ))",
        "+ ",
        "    }",
        "> ",
        "out1 <- genefit(exprs(SCdat)[1,])",
        "Error in genefit(exprs(SCdat)[1, ]) : \n  could not find function \"mclustRestricted\"\n",
        "> ",
        "genefit <- function(y){",
        "+ ",
        "      cond0 <- phenoData(SCdat)[[condition]][y>0]",
        "+ ",
        "      y <- log(y[y>0])",
        "+ ",
        "      ",
        "+ ",
        "      oa <- scDD:::mclustRestricted(y, restrict=TRUE, min.size=min.size)",
        "+ ",
        "      c1 <- scDD:::mclustRestricted(y[cond0==ref], restrict=TRUE, min.size=min.size)",
        "+ ",
        "      c2 <- scDD:::mclustRestricted(y[cond0!=ref], restrict=TRUE, min.size=min.size)",
        "+ ",
        "    ",
        "+ ",
        "      return(list(",
        "+ ",
        "        oa=oa,",
        "+ ",
        "        c1=c1,",
        "+ ",
        "        c2=c2",
        "+ ",
        "      ))",
        "+ ",
        "    }",
        "> ",
        "out1 <- genefit(exprs(SCdat)[1,])",
        "> ",
        "out1",
        "$oa\n$oa$class\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [56] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n$oa$mean\n[1] 3.486985\n\n$oa$var\n[1] 1.925813\n\n$oa$df\n[1] 2\n\n$oa$n\n[1] 102\n\n$oa$bic\n      V,1 \n-365.5589 \n\n$oa$loglik\n[1] -178.1545\n\n$oa$model\n[1] \"X\"\n\n\n$c1\n$c1$class\n Sample3  Sample4  Sample5  Sample6  Sample8 Sample14 Sample16 Sample18 Sample19 Sample20 Sample21 Sample22 \n       1 ",
        "       2        2        2        2        2        1        2        2        2        1        2 \nSample23 Sample25 Sample26 Sample28 Sample34 Sample35 Sample37 Sample39 Sample41 Sample42 Sample46 Sample51 \n       2        2        2        2        2        2        2        2        2        2        1        1 \nSample52 Sample54 Sample55 Sample56 Sample57 Sample58 Sample61 Sample62 Sample64 Sample65 Sample67 Sample68 \n       2        2        2        2        2        2        1        1        2        2 ",
        "       2        2 \nSample69 Sample71 Sample76 Sample77 Sample79 Sample80 Sample82 Sample83 Sample84 Sample87 Sample89 Sample90 \n       2        2        2        2        2        2        2        2        2        2        2        2 \nSample94 Sample95 Sample98 \n       1        2        2 \n\n$c1$mean\n       1        2 \n0.490268 3.173858 \n\n$c1$var\n[1] 0.1294818 0.7274609\n\n$c1$df\n[1] 5\n\n$c1$n\n[1] 51\n\n$c1$bic\n[1] -174.5013\n\n$c1$loglik\n[1] -77.42107\n\n$c1$model\n[1] \"V\"\n\n\n$c2\n$c2$class\n [1] 1 1 1 1 1 1 1 1 1 1 1",
        " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n$c2$mean\n[1] 4.211534\n\n$c2$var\n[1] 1.231079\n\n$c2$df\n[1] 2\n\n$c2$n\n[1] 51\n\n$c2$bic\n      V,1 \n-163.1978 \n\n$c2$loglik\n[1] -77.66709\n\n$c2$model\n[1] \"X\"\n\n\n",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,])",
        "Error in genefit(exprs(SCdat)[i, ]) : object 'i' not found\n",
        "> ",
        "i <- 2",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "i",
        "[1] 18\n",
        "> ",
        "i",
        "[1] 18\n",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "i",
        "[1] 23\n",
        "> ",
        "i",
        "[1] 23\n",
        "> ",
        "i",
        "[1] 23\n",
        "> ",
        "i",
        "[1] 23\n",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "i",
        "[1] 30\n",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "> ",
        "i",
        "[1] 31\n",
        "> ",
        "out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1",
        "Error in exprs(SCdat)[i, ] : subscript out of bounds\n",
        "> ",
        "out <- bplapply(1:nrow(exprs(SCdat)[tofit,]), function(x) ",
        "+ ",
        "      genefit(exprs(SCdat)[tofit[x],]))",
        "Error: could not find function \"bplapply\"\n",
        "> ",
        "library(BiocParallel)",
        "> ",
        "out <- bplapply(1:nrow(exprs(SCdat)[tofit,]), function(x) ",
        "+ ",
        "      genefit(exprs(SCdat)[tofit[x],]))",
        "\n",
        "> ",
        "out <- mclapply(1:nrow(exprs(SCdat)[tofit,]), function(x) ",
        "+ ",
        "      genefit(exprs(SCdat)[tofit[x],]), 2)",
        "Warning message:\n",
        "In mclapply(1:nrow(exprs(SCdat)[tofit, ]), function(x) genefit(exprs(SCdat)[tofit[x],  :",
        "\n ",
        " all scheduled cores encountered errors in user code\n",
        "> ",
        "?mclapply",
        "> ",
        "out <- mclapply(1:nrow(exprs(SCdat)[tofit,]), function(x) ",
        "+ ",
        "      genefit(exprs(SCdat)[tofit[x],]), mc.cores=2)",
        "> ",
        "remove.packages(\"BiocParallel\")",
        "Removing package from ‘/Library/Frameworks/R.framework/Versions/3.4/Resources/library’\n(as ‘lib’ is unspecified)\n",
        "> ",
        "source(\"https://bioconductor.org/biocLite.R\")",
        "Bioconductor version 3.5 (BiocInstaller 1.25.2), ?biocLite for help\n",
        "> ",
        "biocLite(\"BiocParallel\")",
        "BioC_mirror: https://bioconductor.org\n",
        "Using Bioconductor 3.5 (BiocInstaller 1.25.2), R Under development (unstable) (2016-10-26 r71594).\n",
        "Installing package(s) ‘BiocParallel’\n",
        "Warning:",
        " unable to access index for repository https://cran.rstudio.com/bin/macosx/mavericks/contrib/3.4:\n  cannot download all files\n",
        "trying URL 'https://bioconductor.org/packages/3.5/bioc/bin/macosx/mavericks/contrib/3.4/BiocParallel_1.9.2.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 650077 bytes (634 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 634 KB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/9_/2vrgppzn39g7kmtyh0skxf0r0000gn/T//Rtmp2AB6FK/downloaded_packages\n",
        "> ",
        "library(BiocParallel)",
        "> ",
        "out <- bplapply(1:nrow(exprs(SCdat)[tofit,]), function(x) ",
        "+ ",
        "      genefit(exprs(SCdat)[tofit[x],]))",
        "\n",
        "> ",
        "?install_github",
        "No documentation for ‘install_github’ in specified packages and libraries:\nyou could try ‘??install_github’\n",
        "> ",
        "library(devtools)",
        "> ",
        "?install_github",
        "> ",
        "devtools::install_github(\"kdkorthauer/scDD\", build_vignettes = FALSE, ref=\"v1.2.0\")",
        "Downloading GitHub repo kdkorthauer/scDD@v1.2.0\nfrom URL https://api.github.com/repos/kdkorthauer/scDD/zipball/v1.2.0\n",
        "Error in stop(github_error(request)) : 404: Not Found\n (404)\n",
        "> ",
        "devtools::install_github(\"kdkorthauer/scDD\", build_vignettes = FALSE, ref=\"8a387bf\")",
        "Error in curl::curl_fetch_disk(url, x$path, handle = handle) : \n  SSL connect error\n",
        "> ",
        "library(scDD)",
        "> ",
        "devtools::install_github(\"kdkorthauer/scDD\", build_vignettes = FALSE, ref=\"8a387bf\")",
        "Downloading GitHub repo kdkorthauer/scDD@8a387bf\nfrom URL https://api.github.com/repos/kdkorthauer/scDD/zipball/8a387bf\n",
        "Installing scDD\n",
        "\n",
        "\n",
        "'/Library/Frameworks/R.framework/Resources/bin/R' --no-site-file --no-environ --no-save --no-restore --quiet CMD  \\\n  INSTALL  \\\n  '/private/var/folders/9_/2vrgppzn39g7kmtyh0skxf0r0000gn/T/Rtmp2AB6FK/devtoolse1251ef5068/kdkorthauer-scDD-8a387bf'  \\\n  --library='/Library/Frameworks/R.framework/Versions/3.4/Resources/library' --install-tests \n",
        "\n",
        "* installing *source* package ‘scDD’ ...\n",
        "** R\n",
        "** data\n",
        "** preparing package for lazy loading\n",
        "** help\n",
        "*** installing help indices\n",
        "** building package indices\n",
        "** installing vignettes\n",
        "** testing if installed package can be loaded\n",
        "* DONE (scDD)\n",
        "Reloading installed scDD\n",
        "> ",
        "library(scDD)",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2
    ]
}