out<-scDD(SCdat=scyeast[1:1000,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
head(out$Genes)
table(out$Genes$DDcategory)
which.DZ <- which(out$Genes$DDcategory == "DZ")
str(which.DZ)
head(out$Genes[which.DZ,])
library(scDD)
out<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
head(out$Genes)
out2<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
head(out2$Genes)
tail9out$Genes
tail(out$Genes)
library(scDD)
out1 <-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
out2<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
out1$Genes[1:10,]
out2$Genes[1:10,]
tail(out1$Genes)
library(scDD)
out1 <-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
out2<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
head(out1$Genes)
head(out2$Genes)
tail(out1$Genes)
str(exprs(SCdat)[1.])
str(exprs(SCdat)[1,])
tofit <- 1
head(rownames(exprs(SCdat)))
oa <- c1 <- c2 <- vector("list", nrow(exprs(SCdat)[tofit,]))
bf <- den <- comps.all <- comps.c1 <- comps.c2 <- rep(NA, nrow(exprs(SCdat)[tofit,]))
out <- genefit(exprs(SCdat)[tofit,])
genefit <- function(y){
cond0 <- phenoData(SCdat)[[condition]][y>0]
y <- log(y[y>0])
oa <- mclustRestricted(y, restrict=TRUE)
c1 <- mclustRestricted(y[cond0==ref], restrict=TRUE)
c2 <- mclustRestricted(y[cond0!=ref], restrict=TRUE)
return(list(
oa=oa,
c1=c1,
c2=c2
))
}
out <- genefit(exprs(SCdat)[tofit,])
oa <- lapply(out, function(x) x[["oa"]])
c1 <- lapply(out, function(x) x[["c1"]])
c2 <- lapply(out, function(x) x[["c2"]])
str(out)
str(oa)
c1
c2
oa <- out[["oa"]]
oa
c1 <- out[["c1"]]
c2 <- out[["c2"]]
comps.all <- unlist(lapply(oa, function(x) luOutlier(x$class)))
comps.c1  <- unlist(lapply(c1, function(x) luOutlier(x$class)))
comps.c2  <- unlist(lapply(c2, function(x) luOutlier(x$class)))
comps.all <- 1
comps.c1 <- 2
comps.c1 <- 1
comps.c2 <- 1
res_ks <- testKS(exprs(SCdat)[tofit,], phenoData(SCdat)[[condition]], inclZero=FALSE)
pvals <- 0.4174882
sig <- NULL
cats <- rep("NS", length(tofit))
cats
cats.all <- cats
which(!(cats.all %in% c("DE", "DP", "DM", "DB")))
ns <- 1
testZeroes(exprs(SCdat), phenoData(SCdat)[[condition]], ns)
testZeroes <- function(dat, cond, these=1:nrow(dat)){
detection <- colSums(dat>0)/nrow(dat)
pval <- rep(NA, length(these))
for (j in 1:length(these)){
y <- dat[these[j],]
if (sum(y==0) > 0){
M0 <- arm::bayesglm(y>0 ~ detection, family=binomial(link="logit"))
M1 <- arm::bayesglm(y>0 ~ detection + factor(cond), family=binomial(link="logit"))
pval[j] <- anova(M1, M0, test="Chisq")[2,5]
}
}
return(pval)
}
testZeroes(exprs(SCdat), phenoData(SCdat)[[condition]], ns)
dat <- exprs(SCdat)
cond <- phenoData(SCdat)[[condition]]
str(dat)
str(cond)
str(ns)
detection <- colSums(dat>0)/nrow(dat)
pval <- rep(NA, length(these))
these <- ns
detection <- colSums(dat>0)/nrow(dat)
pval <- rep(NA, length(these))
str(detection)
str(pval)
length(these)
j <- 1
y <- dat[these[j],]
str(y)
str(exprs(SCdat)[1,])
sum(y==0)
sum(exprs(SCdat[3,])==0)
library(scDD)
library(scDD)
jointPosterior
?jointPosterior
scDD::jointPosterior
scDD:::jointPosterior
scDD:::jointPosterior()
library(blme)
install_github("vdorie/blme")
library(scDD)
data(scDatExSim)
class(scDatExSim)
show(scDatExSim)
prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
nperms <- 100
RES <- scDD(scDatExSim, prior_param=prior_param, permutations=0, testZeroes=FALSE, min.size=30)
RES$Genes
RES <- scDD(scDatExSim, prior_param=prior_param, permutations=0, testZeroes=FALSE, min.size=3)
RES$Genes
pdf("violin.grid.pdf", height=9)
grid.arrange(plots[[1]], plts[[2]], plts[[3]], plts[[4]], plts[[5]], plts[[6]], ncol=2)
dev.off()
getwd()
setwd()
setwd("~/Downloads")
load("subset.RData")
load("subset.yeast.RData")
# create list of ggplot objs
plts <- list("vector", 6)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[i,], cond, title.gene = rownames(exprs(subset.yeast))[i], MAP = list(c1=subset$Zhat.c1[i,], c2=subset$Zhat.c2[i,]))
}
library(gridExtra)
pdf("violin.grid.pdf", height=9)
grid.arrange(plots[[1]], plts[[2]], plts[[3]], plts[[4]], plts[[5]], plts[[6]], ncol=2)
dev.off()
pdf("violin.grid.pdf", height=9)
grid.arrange(plts[[1]], plts[[2]], plts[[3]], plts[[4]], plts[[5]], plts[[6]], ncol=2)
dev.off()
length(plts)
nrow(exprs(subset.yeast))
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[i,], cond, title.gene = rownames(exprs(subset.yeast))[i], MAP = list(c1=subset$Zhat.c1[i,], c2=subset$Zhat.c2[i,]))
}
# create list of ggplot objs
plts <- list("vector", 6)
cond <- phenoData(subset.yeast)[["condition"]]
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[i,], cond, title.gene = rownames(exprs(subset.yeast))[i], MAP = list(c1=subset$Zhat.c1[i,], c2=subset$Zhat.c2[i,]))
}
library(gridExtra)
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[g,], cond, title.gene = rownames(exprs(subset.yeast))[g],
MAP = list(c1=subset$Zhat.c1[g,], c2=subset$Zhat.c2[g,]))
}
library(gridExtra)
pdf("violin.grid.pdf", height=9)
grid.arrange(plts, ncol=2)
dev.off()
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[g,], cond, title.gene = rownames(exprs(subset.yeast))[g],
MAP = list(c1=subset$Zhat.c1[g,], c2=subset$Zhat.c2[g,]))
}
library(gridExtra)
pdf("violin.grid.pdf", height=9)
grid.arrange(grobs=plts, ncol=2)
dev.off()
g <-5
table(subset$Zhat.c1[g,])
table(subset$Zhat.c2[g,])
rownames(exprs(subset.yeast))[g]
g <- 4
table(subset$Zhat.c1[g,])
table(subset$Zhat.c2[g,])
library(scDD)
data(scDatExSim)
library(Biobase)
class(scDatExSim)
show(scDatExSim)
testKS
RES_KS <- testKS(exprs(scDatExSim), scDatExSim$condition, inclZero=FALSE,
numDE=20, DEIndex=1:20)
str(RES_KS)
?ks.test
ks.test(c(5,5,6,7,8), c(5,6,7,11,1))
supressWarnings(ks.test(c(5,5,6,7,8), c(5,6,7,11,1)))
suppressWarnings(ks.test(c(5,5,6,7,8), c(5,6,7,11,1)))
suppressWarnings(ks.test(c(5,5,6,7,8), c(5,6,7,11,1)))$p.value
sessionInfo(0)
sessionInfo()
library(scDD)
vignette("scDD")
browseVignettes("scDD")
par(mfrow=c(2,2), tcl=-0.5, mai=c(0.4,0.4,0.5,0.3))
x <- seq(0, 6, by=0.05)
## traditional de
# mu1 is 2
# mu2 is 4
cord.x <- c(0,x,6)
cord.y <- c(0,dnorm(x, 2, 0.75),0)
curve(dnorm(x, 2 , 0.75),xlim=c(0,6),main="Traditional DE", xaxt="n", xlab="", ylab="", yaxt="n")
polygon(cord.x,cord.y,col=rgb(0,0,1,1/4))
cord.x <- c(0,x,6)
cord.y <- c(0,dnorm(x, 4, 0.75),0)
lines(x, dnorm(x, 4 , 0.75))
polygon(cord.x,cord.y,col=rgb(1,0,0,1/4))
axis(side=1, at=c(2,4), labels=c(expression(mu[1]), expression(mu[2])), pos=0, cex.axis=1.5)
mtext("(A)", side = 3, line=0.5, adj=-0.1, cex=1.2, font=2)
x <- seq(0, 10, by=0.05)
## differential proportion
cord.x <- c(0,x,10)
cord.y <- c(0,0.3*dnorm(x, 7, 1) + 0.7*dnorm(x, 3, 1),0)
curve(0.3*dnorm(x, 7, 1) + 0.7*dnorm(x, 3, 1),xlim=c(0,10),main="DP", xaxt="n", xlab="", ylab="", yaxt="n")
polygon(cord.x,cord.y,col=rgb(0,0,1,1/4))
cord.x <- c(0,x,10)
cord.y <- c(0,0.3*dnorm(x, 3, 1) + 0.7*dnorm(x, 7, 1),0)
lines(x, 0.3*dnorm(x, 3, 1) + 0.7*dnorm(x, 7, 1))
polygon(cord.x,cord.y,col=rgb(1,0,0,1/4))
axis(side=1, at=c(3,7), labels=c(expression(mu[1]), expression(mu[2])), pos=0, cex.axis=1.5)
mtext("(B)", side = 3, line=0.5, adj=-0.1, cex=1.2, font=2)
## differential modes (DM)
cord.x <- c(0,x,6)
cord.y <- c(0,dnorm(x, 2, 0.75),0)
curve(dnorm(x, 2 , 0.75),xlim=c(0,6),main="DM", xaxt="n", xlab="", ylab="", yaxt="n")
polygon(cord.x,cord.y,col=rgb(0,0,1,1/4))
cord.x <- c(0,x,6)
cord.y <- c(0,0.3*dnorm(x, 2, 0.6) + 0.7*dnorm(x, 4, 0.6),0)
lines(x, 0.3*dnorm(x, 2, 0.6) + 0.7*dnorm(x, 4, 0.6))
polygon(cord.x,cord.y,col=rgb(1,0,0,1/4))
axis(side=1, at=c(2,4), labels=c(expression(mu[1]), expression(mu[2])), pos=0, cex.axis=1.5)
mtext("(C)", side = 3, line=0.5, adj=-0.1, cex=1.2, font=2)
## Both DM and DP
cord.x <- c(0,x,10)
cord.y <- c(0,0.5*dnorm(x, 2.5, 1) + 0.5*dnorm(x, 7.5, 1),0)
curve(0.5*dnorm(x, 2.5, 1) + 0.5*dnorm(x, 7.5, 1),xlim=c(0,10),main="DB", xaxt="n", xlab="", ylab="", yaxt="n",
ylim=c(0,max(0.5*dnorm(x, 2.5, 1) + 0.5*dnorm(x, 7.5, 1))))
polygon(cord.x,cord.y,col=rgb(0,0,1,1/4))
cord.x <- c(0,x,10)
cord.y <- c(0,0.8*dnorm(x, 5, 2),0)
lines(x, 0.8*dnorm(x, 5, 2))
polygon(cord.x,cord.y,col=rgb(1,0,0,1/4))
axis(side=1, at=c(2.5, 5, 7.5), labels=c(expression(mu[1]), expression(mu[3]), expression(mu[2])), pos=0, cex.axis=1.5)
mtext("(D)", side = 3, line=0.5, adj=-0.1, cex=1.2, font=2)
vignette("scDD")
library(scDD)
library(scDD)
vignettes("scDD")
vignette("scDD")
citation("scDD")
library(scDD)
sessionInfo()
data(scDatExSim)
class(scDatExSim)
dim(scDatExSim)
prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
scDD
RES <- scDD(scDatExSim, prior_param=prior_param, testZeroes=FALSE)
BiocParallel::register(BPPARAM =
BiocParallel::MulticoreParam(workers=n.cores))
n.cores <- 2
BiocParallel::register(BPPARAM =
BiocParallel::MulticoreParam(workers=n.cores))
show(scDatExSim)
closeAllConnections()
closeAllConnections()
closeAllConnections()
?BiocParallel
?register
registered()
BiocParallel:::registered()
RES <- scDD(scDatExSim, prior_param=prior_param, testZeroes=FALSE)
str(RES)
message("Notice! Number of permutations is set to zero; using
Kolmogorov-Smirnov to test for differences in distributions
instead of the Bayes Factor permutation test")
BiocParallel::register(BPPARAM =
BiocParallel::MulticoreParam(workers=1))
data(scDatExSim)
class(scDatExSim)
dim(scDatExSim)
prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
data(scDatEx)
class(scDatEx)
dim(scDatEx)
nDE <- 5
nDP <- 5
nDM <- 5
nDB <- 5
nEE <- 5
nEP <- 5
numSamples <- 100
seed <- 816
SD <- simulateSet(scDatEx, numSamples=numSamples,
nDE=nDE, nDP=nDP, nDM=nDM, nDB=nDB,
nEE=nEE, nEP=nEP, sd.range=c(2,2), modeFC=4, plots=FALSE,
random.seed=seed)
str(SD)
condition <- c(rep(1, numSamples), rep(2, numSamples))
rownames(SD[[1]]) <- paste0(rownames(SD[[1]]), 1:nrow(SD[[1]]), sep="")
colnames(SD[[1]]) <- names(condition) <- paste0("Sample",
1:ncol(SD[[1]]), sep="")
SDExpressionSet <- ExpressionSet(assayData=SD[[1]],
phenoData=as(data.frame(condition), "AnnotatedDataFrame"))
library(Biobase)
SDExpressionSet <- ExpressionSet(assayData=SD[[1]],
phenoData=as(data.frame(condition), "AnnotatedDataFrame"))
data(scDatExList)
str(scDatExList)
condition.names <- names(scDatExList)
scDatExMat <- preprocess(scDatExList, ConditionNames=condition.names,
zero.thresh=1, median_norm=FALSE)
scDatExMatNormThresh <- preprocess(scDatExList, ConditionNames=condition.names,
zero.thresh=0.75, median_norm=TRUE)
data(scDatExSim)
de <- sideViolin(exprs(scDatExSim)[1,], scDatExSim$condition,
title.gene=featureNames(scDatExSim)[1])
de
data(scDatExSim)
show(scDatExSim)
prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
RES <- scDD(scDatExSim, prior_param=prior_param, testZeroes=FALSE)
SCdat <- scDatExSim
permutations=0
testZeroes <- FALSE
adjust.perms=FALSE
n.cores=parallel::detectCores()
n.cores
parallelBy <- "Genes"
condition <- "condition"
min.size <- 3
if(!("ExpressionSet" %in% class(SCdat))){
stop("Please provide a valid 'ExpressionSet' object.")
}
alpha = prior_param$alpha
m0 = prior_param$mu0
s0 = prior_param$s0
a0 = prior_param$a0
b0 = prior_param$b0
if (length(unique(phenoData(SCdat)[[condition]])) != 2 |
length(phenoData(SCdat)[[condition]]) != ncol(exprs(SCdat))){
stop("Error: Please specify valid condition labels.")
}
# reference category/condition - the first listed one
ref <- unique(phenoData(SCdat)[[condition]])[1]
ref
tofit <- which(
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) >=
max(min.size,2)) &
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) >=
max(min.size,2)))
tofit
if (length(tofit) < nrow(exprs(SCdat))){
if(testZeroes){
message("Notice: There exist genes that are all (or almost all) zero.
For genes with 0 or 1 nonzero measurements per condition,
only testing for DZ")
}else{
message("Notice: There exist genes that are all (or almost all) zero.
Skipping genes with 0 or 1 nonzero measurements per condition")
}
}
skipConstant <- which(
apply(exprs(SCdat)[tofit,phenoData(SCdat)[[condition]]==ref], 1,
function(x) length(unique(x[x>0])) == 1) |
apply(exprs(SCdat)[tofit,phenoData(SCdat)[[condition]]!=ref], 1,
function(x) length(unique(x[x>0])) == 1) )
if (length(skipConstant) > 0){
if(testZeroes){
message("Notice: There exist genes with constant nonzero values.
These genes will only be considered for the DZ pattern.")
}else{
message("Notice: There exist genes with constant nonzero values.
Skipping these genes.")
}
tofit <- tofit[-skipConstant]
}
message("Clustering observed expression data for each gene")
message(paste0("Setting up parallel back-end using ", n.cores, " cores" ))
BiocParallel::register(BPPARAM =
BiocParallel::MulticoreParam(workers=n.cores))
oa <- c1 <- c2 <- vector("list", nrow(exprs(SCdat)[tofit,]))
bf <- den <- comps.all <-
comps.c1 <- comps.c2 <- rep(NA, nrow(exprs(SCdat)[tofit,]))
permutations
genefit <- function(y){
cond0 <- phenoData(SCdat)[[condition]][y>0]
y <- log(y[y>0])
oa <- mclustRestricted(y, restrict=TRUE, min.size=min.size)
c1 <- mclustRestricted(y[cond0==ref], restrict=TRUE, min.size=min.size)
c2 <- mclustRestricted(y[cond0!=ref], restrict=TRUE, min.size=min.size)
return(list(
oa=oa,
c1=c1,
c2=c2
))
}
out1 <- genefit(exprs(SCdat)[1,])
genefit <- function(y){
cond0 <- phenoData(SCdat)[[condition]][y>0]
y <- log(y[y>0])
oa <- scDD:::mclustRestricted(y, restrict=TRUE, min.size=min.size)
c1 <- scDD:::mclustRestricted(y[cond0==ref], restrict=TRUE, min.size=min.size)
c2 <- scDD:::mclustRestricted(y[cond0!=ref], restrict=TRUE, min.size=min.size)
return(list(
oa=oa,
c1=c1,
c2=c2
))
}
out1 <- genefit(exprs(SCdat)[1,])
out1
out1 <- genefit(exprs(SCdat)[i,])
i <- 2
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
i
i
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
i
i
i
i
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
i
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
i
out1 <- genefit(exprs(SCdat)[i,]); i <- i + 1
out <- bplapply(1:nrow(exprs(SCdat)[tofit,]), function(x)
genefit(exprs(SCdat)[tofit[x],]))
library(BiocParallel)
out <- bplapply(1:nrow(exprs(SCdat)[tofit,]), function(x)
genefit(exprs(SCdat)[tofit[x],]))
out <- mclapply(1:nrow(exprs(SCdat)[tofit,]), function(x)
genefit(exprs(SCdat)[tofit[x],]), 2)
?mclapply
out <- mclapply(1:nrow(exprs(SCdat)[tofit,]), function(x)
genefit(exprs(SCdat)[tofit[x],]), mc.cores=2)
remove.packages("BiocParallel")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
library(BiocParallel)
out <- bplapply(1:nrow(exprs(SCdat)[tofit,]), function(x)
genefit(exprs(SCdat)[tofit[x],]))
?install_github
library(devtools)
?install_github
devtools::install_github("kdkorthauer/scDD", build_vignettes = FALSE, ref="v1.2.0")
devtools::install_github("kdkorthauer/scDD", build_vignettes = FALSE, ref="8a387bf")
library(scDD)
devtools::install_github("kdkorthauer/scDD", build_vignettes = FALSE, ref="8a387bf")
library(scDD)
