parallelBy="Genes")
tail(out$Genes)
warnings()
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
# filter for number of nonzero values
nonzero1 <- rowSums(exprs(scyeast)[,condition==1]>0)
nonzero2 <- rowSums(exprs(scyeast)[,condition==2]>0)
# keep only the genes with at least 3 nonzero cells in each condition
keep <- nonzero1 >= 3 & nonzero2 >= 3
scyeast <- scyeast[keep,]
prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
permutations = 0
testZeroes = FALSE
adjust.perms = FALSE
n.cores = 2
parallelBy="Genes"
condition="condition"
install_github("kdkorthauer/scDD")
out<-scDD(SCdat=scyeast,
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE,
n.cores = 4,
parallelBy="Genes")
out$Genes[5000:5020,]
table(out$Genes$DDcategory)
scDD:::feDP
str(y)
str(cond)
str(cond0)
cond <- cond0
length(unique(y[cond==ref]))==1
ref <- unique(condition)[1]
ref
ref <- unique(cond0)[1]
ref
unique(y[cond==ref]))==1
length(unique(y[cond==ref]))==1
length(unique(y[cond==ref]))==1 | length(unique(y[cond!=ref]))==1
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
# filter for number of nonzero values
nonzero1 <- rowSums(exprs(scyeast)[,condition==1]>0)
nonzero2 <- rowSums(exprs(scyeast)[,condition==2]>0)
# keep only the genes with at least 3 nonzero cells in each condition
keep <- nonzero1 >= 3 & nonzero2 >= 3
scyeast <- scyeast[keep,]
prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
permutations = 0
testZeroes = FALSE
adjust.perms = FALSE
n.cores = 2
parallelBy="Genes"
condition="condition"
install_github("kdkorthauer/scDD")
out<-scDD(SCdat=scyeast,
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE,
n.cores = 4,
parallelBy="Genes")
warnings()
condition
ref
nofit <- (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) <= 1) |
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) <= 1)
str(nofit)
sum(nofit)
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
# filter for number of nonzero values
nonzero1 <- rowSums(exprs(scyeast)[,condition==1]>0)
nonzero2 <- rowSums(exprs(scyeast)[,condition==2]>0)
# keep only the genes with at least 3 nonzero cells in each condition
keep <- nonzero1 >= 2 & nonzero2 >= 2
scyeast <- scyeast[keep,]
prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
permutations = 0
testZeroes = FALSE
adjust.perms = FALSE
n.cores = 2
parallelBy="Genes"
condition="condition"
SCdat=scyeast
nofit <- (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) <= 1) |
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) <= 1)
str(nofit)
sum(nofit)
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
SCdat <- scyeast
# check for genes that are all (or almost all) zeroes
nofit <- (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) <= 1) |
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) <= 1)
ref
show(SCdat)
str(phenoData(SCdat))
ofit <- (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) )
str(exprs(SCdat))
str(exprs(SCdat)[, phenoData(SCdat)[[condition]] == ref])
str(phenoData(SCdat))
str(phenoData(SCdat)[[condition]])
condition
condition <- "condition"
nofit <- (rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) <= 1) |
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) <= 1)
str(nofit)
sum(nofit)
nofit <- which((rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) <= 1) |
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) <= 1))
str(nofit)
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
# filter for number of nonzero values
nonzero1 <- rowSums(exprs(scyeast)[,condition==1]>0)
nonzero2 <- rowSums(exprs(scyeast)[,condition==2]>0)
# keep only the genes with at least 3 nonzero cells in each condition
keep <- nonzero1 >= 2 & nonzero2 >= 2
scyeast <- scyeast[keep,]
prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
permutations = 0
testZeroes = FALSE
adjust.perms = FALSE
n.cores = 2
parallelBy="Genes"
condition="condition"
install_github("kdkorthauer/scDD")
out<-scDD(SCdat=scyeast,
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE,
n.cores = 4,
parallelBy="Genes")
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
# filter for number of nonzero values
nonzero1 <- rowSums(exprs(scyeast)[,condition==1]>0)
nonzero2 <- rowSums(exprs(scyeast)[,condition==2]>0)
# keep only the genes with at least 3 nonzero cells in each condition
keep <- nonzero1 >= 2 & nonzero2 >= 2
#scyeast <- scyeast[keep,]
prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
permutations = 0
testZeroes = FALSE
adjust.perms = FALSE
n.cores = 2
parallelBy="Genes"
condition="condition"
install_github("kdkorthauer/scDD")
out<-scDD(SCdat=scyeast,
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE,
n.cores = 4,
parallelBy="Genes")
show(SCdat)
tofit <- which((rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) > 1) |
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) > 1))
str(tofit)
length(tofit)
tofit <- which((rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]==ref]>0) > 1) &
(rowSums(exprs(SCdat)[,phenoData(SCdat)[[condition]]!=ref]>0) > 1))
length(tofit)
length(tofit) < nrow(exprs(SCdat))
nrow(exprs(SCdat)[tofit,])
if (length(tofit) < nrow(exprs(SCdat))){
if(testZeroes){
message("Notice: There exist genes in this set that are all (or almost all) zero. Only testing for differential zeroes in genes with 0 or 1 nonzero measurements per condition")
}else{
message("Notice: There exist genes in this set that are all (or almost all) zero. Skipping genes with 0 or 1 nonzero measurements per condition")
}
}
if (length(tofit) < nrow(exprs(SCdat))){
if(testZeroes){
message("Notice: There exist genes that are all (or almost all) zero. Only testing for differential zeroes in genes with 0 or 1 nonzero measurements per condition")
}else{
message("Notice: There exist genes that are all (or almost all) zero. Skipping genes with 0 or 1 nonzero measurements per condition")
}
}
cats.all <- c("DE", "DM", NA, "DP", "NC")
which(!(cats.all %in% c("DE", "DP", "DM", "DB")))
library(scDD)
out$Genes[3000:3020,]
dat<-read.table("NormalizedQuakeData_NoTrimDeDup.txt",header=TRUE)
ones<-grep("Unstressed",colnames(dat))
twos<-grep("Stressed",colnames(dat))
condition<-vector(length=length(colnames(dat)))
condition[ones]<-1
condition[twos]<-2
names(condition)<-colnames(dat)
scyeast<-ExpressionSet(assayData = as.matrix(dat),
phenoData = as(data.frame(condition), "AnnotatedDataFrame"))
prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
permutations = 0
testZeroes = FALSE
adjust.perms = FALSE
n.cores = 2
parallelBy="Genes"
condition="condition"
out<-scDD(SCdat=scyeast,
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE,
n.cores = 4,
parallelBy="Genes")
out$Genes[3000:3020,]
which(out$Genes$gene == "YIR033W")
out$Genes[which(out$Genes$gene == "YIR033W"):(which(out$Genes$gene == "YIR033W")+20)]
out$Genes[which(out$Genes$gene == "YIR033W"):(which(out$Genes$gene == "YIR033W")+20),]
library(scDD)
nrow(exprs(scyeast))
out<-scDD(SCdat=scyeast,
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
out$Genes[3000:3020,]
out$Genes[which(out$Genes$gene == "YIR033W"):(which(out$Genes$gene == "YIR033W")+20),]
str(out$Genes$gene)
str(as.character(out$Genes$gene))
all.equal(as.character(out$Genes$gene), rownames(exprs(SCDat)))
all.equal(as.character(out$Genes$gene), rownames(exprs(SCdat)))
head(out$Genes$gene)
out<-scDD(SCdat=scyeast[1:1000,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
head(out$Genes)
table(out$Genes$DDcategory)
which.DZ <- which(out$Genes$DDcategory == "DZ")
str(which.DZ)
head(out$Genes[which.DZ,])
library(scDD)
out<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
head(out$Genes)
out2<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
head(out2$Genes)
tail9out$Genes
tail(out$Genes)
library(scDD)
out1 <-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
out2<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
out1$Genes[1:10,]
out2$Genes[1:10,]
tail(out1$Genes)
library(scDD)
out1 <-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = TRUE,
adjust.perms = FALSE)
out2<-scDD(SCdat=scyeast[1:500,],
prior_param = prior_param,
permutations = 0,
testZeroes = FALSE,
adjust.perms = FALSE)
head(out1$Genes)
head(out2$Genes)
tail(out1$Genes)
str(exprs(SCdat)[1.])
str(exprs(SCdat)[1,])
tofit <- 1
head(rownames(exprs(SCdat)))
oa <- c1 <- c2 <- vector("list", nrow(exprs(SCdat)[tofit,]))
bf <- den <- comps.all <- comps.c1 <- comps.c2 <- rep(NA, nrow(exprs(SCdat)[tofit,]))
out <- genefit(exprs(SCdat)[tofit,])
genefit <- function(y){
cond0 <- phenoData(SCdat)[[condition]][y>0]
y <- log(y[y>0])
oa <- mclustRestricted(y, restrict=TRUE)
c1 <- mclustRestricted(y[cond0==ref], restrict=TRUE)
c2 <- mclustRestricted(y[cond0!=ref], restrict=TRUE)
return(list(
oa=oa,
c1=c1,
c2=c2
))
}
out <- genefit(exprs(SCdat)[tofit,])
oa <- lapply(out, function(x) x[["oa"]])
c1 <- lapply(out, function(x) x[["c1"]])
c2 <- lapply(out, function(x) x[["c2"]])
str(out)
str(oa)
c1
c2
oa <- out[["oa"]]
oa
c1 <- out[["c1"]]
c2 <- out[["c2"]]
comps.all <- unlist(lapply(oa, function(x) luOutlier(x$class)))
comps.c1  <- unlist(lapply(c1, function(x) luOutlier(x$class)))
comps.c2  <- unlist(lapply(c2, function(x) luOutlier(x$class)))
comps.all <- 1
comps.c1 <- 2
comps.c1 <- 1
comps.c2 <- 1
res_ks <- testKS(exprs(SCdat)[tofit,], phenoData(SCdat)[[condition]], inclZero=FALSE)
pvals <- 0.4174882
sig <- NULL
cats <- rep("NS", length(tofit))
cats
cats.all <- cats
which(!(cats.all %in% c("DE", "DP", "DM", "DB")))
ns <- 1
testZeroes(exprs(SCdat), phenoData(SCdat)[[condition]], ns)
testZeroes <- function(dat, cond, these=1:nrow(dat)){
detection <- colSums(dat>0)/nrow(dat)
pval <- rep(NA, length(these))
for (j in 1:length(these)){
y <- dat[these[j],]
if (sum(y==0) > 0){
M0 <- arm::bayesglm(y>0 ~ detection, family=binomial(link="logit"))
M1 <- arm::bayesglm(y>0 ~ detection + factor(cond), family=binomial(link="logit"))
pval[j] <- anova(M1, M0, test="Chisq")[2,5]
}
}
return(pval)
}
testZeroes(exprs(SCdat), phenoData(SCdat)[[condition]], ns)
dat <- exprs(SCdat)
cond <- phenoData(SCdat)[[condition]]
str(dat)
str(cond)
str(ns)
detection <- colSums(dat>0)/nrow(dat)
pval <- rep(NA, length(these))
these <- ns
detection <- colSums(dat>0)/nrow(dat)
pval <- rep(NA, length(these))
str(detection)
str(pval)
length(these)
j <- 1
y <- dat[these[j],]
str(y)
str(exprs(SCdat)[1,])
sum(y==0)
sum(exprs(SCdat[3,])==0)
library(scDD)
library(scDD)
jointPosterior
?jointPosterior
scDD::jointPosterior
scDD:::jointPosterior
scDD:::jointPosterior()
library(blme)
install_github("vdorie/blme")
library(scDD)
data(scDatExSim)
class(scDatExSim)
show(scDatExSim)
prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
nperms <- 100
RES <- scDD(scDatExSim, prior_param=prior_param, permutations=0, testZeroes=FALSE, min.size=30)
RES$Genes
RES <- scDD(scDatExSim, prior_param=prior_param, permutations=0, testZeroes=FALSE, min.size=3)
RES$Genes
pdf("violin.grid.pdf", height=9)
grid.arrange(plots[[1]], plts[[2]], plts[[3]], plts[[4]], plts[[5]], plts[[6]], ncol=2)
dev.off()
getwd()
setwd()
setwd("~/Downloads")
load("subset.RData")
load("subset.yeast.RData")
# create list of ggplot objs
plts <- list("vector", 6)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[i,], cond, title.gene = rownames(exprs(subset.yeast))[i], MAP = list(c1=subset$Zhat.c1[i,], c2=subset$Zhat.c2[i,]))
}
library(gridExtra)
pdf("violin.grid.pdf", height=9)
grid.arrange(plots[[1]], plts[[2]], plts[[3]], plts[[4]], plts[[5]], plts[[6]], ncol=2)
dev.off()
pdf("violin.grid.pdf", height=9)
grid.arrange(plts[[1]], plts[[2]], plts[[3]], plts[[4]], plts[[5]], plts[[6]], ncol=2)
dev.off()
length(plts)
nrow(exprs(subset.yeast))
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[i,], cond, title.gene = rownames(exprs(subset.yeast))[i], MAP = list(c1=subset$Zhat.c1[i,], c2=subset$Zhat.c2[i,]))
}
# create list of ggplot objs
plts <- list("vector", 6)
cond <- phenoData(subset.yeast)[["condition"]]
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[i,], cond, title.gene = rownames(exprs(subset.yeast))[i], MAP = list(c1=subset$Zhat.c1[i,], c2=subset$Zhat.c2[i,]))
}
library(gridExtra)
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[g,], cond, title.gene = rownames(exprs(subset.yeast))[g],
MAP = list(c1=subset$Zhat.c1[g,], c2=subset$Zhat.c2[g,]))
}
library(gridExtra)
pdf("violin.grid.pdf", height=9)
grid.arrange(plts, ncol=2)
dev.off()
library(Biobase)
for (g in 1:nrow(exprs(subset.yeast))){
plts[[g]] <- sideViolin(exprs(subset.yeast)[g,], cond, title.gene = rownames(exprs(subset.yeast))[g],
MAP = list(c1=subset$Zhat.c1[g,], c2=subset$Zhat.c2[g,]))
}
library(gridExtra)
pdf("violin.grid.pdf", height=9)
grid.arrange(grobs=plts, ncol=2)
dev.off()
g <-5
table(subset$Zhat.c1[g,])
table(subset$Zhat.c2[g,])
rownames(exprs(subset.yeast))[g]
g <- 4
table(subset$Zhat.c1[g,])
table(subset$Zhat.c2[g,])
library(scDD)
data(scDatExSim)
library(Biobase)
class(scDatExSim)
show(scDatExSim)
testKS
RES_KS <- testKS(exprs(scDatExSim), scDatExSim$condition, inclZero=FALSE,
numDE=20, DEIndex=1:20)
str(RES_KS)
?ks.test
ks.test(c(5,5,6,7,8), c(5,6,7,11,1))
supressWarnings(ks.test(c(5,5,6,7,8), c(5,6,7,11,1)))
suppressWarnings(ks.test(c(5,5,6,7,8), c(5,6,7,11,1)))
suppressWarnings(ks.test(c(5,5,6,7,8), c(5,6,7,11,1)))$p.value
install.packages("roxygen2")
install.packages("fields")
install.packages("mclust")
install.packages("arm")
install.packages("mclust")
install.packages("outliers")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocParallel")
biocLite("EBSeq")
biocLite("Biobase")
install.packages("blockmodeling")
install.packages("ggplot2")
install.packages("scales")
install.packages("ggplot2")
install.packages("blockmodeling")
install.packages("blockmodeling")
