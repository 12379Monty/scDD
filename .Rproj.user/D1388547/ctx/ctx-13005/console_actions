{
    "data" : [
        "\nR version 3.3.1 (2016-06-21) -- \"Bug in Your Hair\"\nCopyright (C) 2016 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "SCdat = scyeast",
        "Error: object 'scyeast' not found\n",
        "> ",
        "dat<-read.table(\"NormalizedQuakeData_NoTrimDeDup.txt\",header=TRUE)",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(file, \"rt\") :",
        "\n ",
        " cannot open file 'NormalizedQuakeData_NoTrimDeDup.txt': No such file or directory\n",
        "> ",
        "ones<-grep(\"Unstressed\",colnames(dat))",
        "Error in is.data.frame(x) : object 'dat' not found\n",
        "> ",
        "twos<-grep(\"Stressed\",colnames(dat))",
        "Error in is.data.frame(x) : object 'dat' not found\n",
        "> ",
        "condition<-vector(length=length(colnames(dat)))",
        "Error in is.data.frame(x) : object 'dat' not found\n",
        "> ",
        "condition[ones]<-1",
        "Error in condition[ones] <- 1 : object 'condition' not found\n",
        "> ",
        "condition[twos]<-2",
        "Error in condition[twos] <- 2 : object 'condition' not found\n",
        "> ",
        "names(condition)<-colnames(dat)",
        "Error in is.data.frame(x) : object 'dat' not found\n",
        "> ",
        "scyeast<-ExpressionSet(assayData = as.matrix(dat),",
        "+ ",
        "                       phenoData = as(data.frame(condition), \"AnnotatedDataFrame\"))",
        "Error: could not find function \"ExpressionSet\"\n",
        "> ",
        "",
        "> ",
        "prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)",
        "> ",
        "library(Biobase)",
        "Loading required package: BiocGenerics\n",
        "Loading required package: parallel\n",
        "\nAttaching package: ‘BiocGenerics’\n\n",
        "The following objects are masked from ‘package:parallel’:\n\n    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport, clusterMap, parApply,\n    parCapply, parLapply, parLapplyLB, parRapply, parSapply, parSapplyLB\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    IQR, mad, xtabs\n\n",
        "The following objects are masked from ‘package:base’:\n\n    anyDuplicated, append, as.data.frame, cbind, colnames, do.call, duplicated, eval, evalq, Filter,\n    Find, get, grep, grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match, mget, order,\n    paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff,\n    sort, table, tapply, union, unique, unsplit\n\n",
        "Welcome to Bioconductor\n\n    Vignettes contain introductory material; view with 'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n",
        "> ",
        "library(scDD)",
        "> ",
        "SCdat=scyeast",
        "Error: object 'scyeast' not found\n",
        "> ",
        "dat<-read.table(\"NormalizedQuakeData_NoTrimDeDup.txt\",header=TRUE)",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(file, \"rt\") :",
        "\n ",
        " cannot open file 'NormalizedQuakeData_NoTrimDeDup.txt': No such file or directory\n",
        "> ",
        "ones<-grep(\"Unstressed\",colnames(dat))",
        "Error in colnames(dat) : object 'dat' not found\n",
        "> ",
        "twos<-grep(\"Stressed\",colnames(dat))",
        "Error in colnames(dat) : object 'dat' not found\n",
        "> ",
        "condition<-vector(length=length(colnames(dat)))",
        "Error in colnames(dat) : object 'dat' not found\n",
        "> ",
        "condition[ones]<-1",
        "Error in condition[ones] <- 1 : object 'condition' not found\n",
        "> ",
        "condition[twos]<-2",
        "Error in condition[twos] <- 2 : object 'condition' not found\n",
        "> ",
        "names(condition)<-colnames(dat)",
        "Error in colnames(dat) : object 'dat' not found\n",
        "> ",
        "scyeast<-ExpressionSet(assayData = as.matrix(dat),",
        "+ ",
        "                       phenoData = as(data.frame(condition), \"AnnotatedDataFrame\"))",
        "Error in as.matrix(dat) : object 'dat' not found\n",
        "> ",
        "",
        "> ",
        "prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)",
        "> ",
        "setwd(\"~/Desktop\")",
        "> ",
        "dat<-read.table(\"NormalizedQuakeData_NoTrimDeDup.txt\",header=TRUE)",
        "> ",
        "ones<-grep(\"Unstressed\",colnames(dat))",
        "> ",
        "twos<-grep(\"Stressed\",colnames(dat))",
        "> ",
        "condition<-vector(length=length(colnames(dat)))",
        "> ",
        "condition[ones]<-1",
        "> ",
        "condition[twos]<-2",
        "> ",
        "names(condition)<-colnames(dat)",
        "> ",
        "scyeast<-ExpressionSet(assayData = as.matrix(dat),",
        "+ ",
        "                       phenoData = as(data.frame(condition), \"AnnotatedDataFrame\"))",
        "> ",
        "",
        "> ",
        "prior_param <-list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)",
        "> ",
        "SCdat = scyeast",
        "> ",
        "rm(SCdag)",
        "Warning message:\n",
        "In rm(SCdag) :",
        " object 'SCdag' not found\n",
        "> ",
        "rm(SCdat)",
        "> ",
        "SCdat = scyeast",
        "> ",
        "rm(scyeast)",
        "> ",
        "permutations = 0",
        "> ",
        "testZeroes = FALSE",
        "> ",
        "adjust.perms = FALSE",
        "> ",
        "n.cores <- 1",
        "> ",
        "parallelBy=\"Genes\"",
        "> ",
        "out<-scDD(SCdat,",
        "+ ",
        "prior_param = prior_param, ",
        "+ ",
        "permutations = 0, ",
        "+ ",
        "testZeroes = FALSE, ",
        "+ ",
        "adjust.perms = FALSE,",
        "+ ",
        "n.cores = 2, ",
        "+ ",
        "parallelBy=\"Genes\")",
        "Clustering observed expression data for each gene\n",
        "Setting up parallel back-end using 2 cores\n",
        "Error: BiocParallel errors\n  element index: 2, 3, 4, 5, 6, 7, ...\n  first error: missing value where TRUE/FALSE needed\n",
        "In addition: ",
        "Warning message:\n",
        "stop worker failed:\n  'clear_cluster' receive data failed:\n  reached elapsed time limit \n",
        "> ",
        "n.cores <- 2",
        "> ",
        "# check whether SCdat is a member of the ExpressionSet class",
        "> ",
        "  if(!(\"ExpressionSet\" %in% class(SCdat))){",
        "+ ",
        "    stop(\"Please provide a valid 'ExpressionSet' object.\")",
        "+ ",
        "  }",
        "> ",
        "alpha = prior_param$alpha",
        "> ",
        "  m0 = prior_param$mu0",
        "> ",
        "  s0 = prior_param$s0",
        "> ",
        "  a0 = prior_param$a0",
        "> ",
        "  b0 = prior_param$b0",
        "> ",
        "if (length(unique(phenoData(SCdat)[[condition]])) != 2 | length(phenoData(SCdat)[[condition]]) != ncol(exprs(SCdat))){",
        "+ ",
        "    stop(\"Error: Please specify valid condition labels.\")",
        "+ ",
        "  }",
        "Error in .subset2(x, i, exact = exact) : no such index at level 1\n",
        "> ",
        "condition=\"condition\"",
        "> ",
        "if (length(unique(phenoData(SCdat)[[condition]])) != 2 | length(phenoData(SCdat)[[condition]]) != ncol(exprs(SCdat))){",
        "+ ",
        "    stop(\"Error: Please specify valid condition labels.\")",
        "+ ",
        "  }",
        "> ",
        "ref <- unique(phenoData(SCdat)[[condition]])[1]",
        "> ",
        "ref",
        "[1] 2\n",
        "> ",
        "message(\"Clustering observed expression data for each gene\")",
        "Clustering observed expression data for each gene\n",
        "> ",
        "  message(paste0(\"Setting up parallel back-end using \", n.cores, \" cores\" ))",
        "Setting up parallel back-end using 2 cores\n",
        "> ",
        "  BiocParallel::register(BPPARAM = BiocParallel::MulticoreParam(workers=n.cores))",
        "> ",
        "oa <- c1 <- c2 <- vector(\"list\", nrow(exprs(SCdat)))",
        "> ",
        "  bf <- den <- comps.all <- comps.c1 <- comps.c2 <- rep(NA, nrow(exprs(SCdat)))",
        "> ",
        "permutations",
        "[1] 0\n",
        "> ",
        "mclustRestricted()",
        "Error in is.data.frame(frame) : argument \"y\" is missing, with no default\n",
        "> ",
        "genefit <- function(y){",
        "+ ",
        "      cond0 <- phenoData(SCdat)[[condition]][y>0]",
        "+ ",
        "      y <- log(y[y>0])",
        "+ ",
        "      ",
        "+ ",
        "      oa <- mclustRestricted(y, restrict=TRUE)",
        "+ ",
        "      c1 <- mclustRestricted(y[cond0==ref], restrict=TRUE)",
        "+ ",
        "      c2 <- mclustRestricted(y[cond0!=ref], restrict=TRUE)",
        "+ ",
        "    ",
        "+ ",
        "      return(list(",
        "+ ",
        "        oa=oa,",
        "+ ",
        "        c1=c1,",
        "+ ",
        "        c2=c2",
        "+ ",
        "      ))",
        "+ ",
        "    }",
        "> ",
        "out <- bplapply(1:nrow(exprs(SCdat)), function(x) genefit(exprs(SCdat)[x,]))",
        "Error: could not find function \"bplapply\"\n",
        "> ",
        "library(BiocParallel)",
        "> ",
        "out <- bplapply(1:nrow(exprs(SCdat)), function(x) genefit(exprs(SCdat)[x,]))",
        "Error: BiocParallel errors\n  element index: 2, 3, 4, 5, 6, 7, ...\n  first error: missing value where TRUE/FALSE needed\n",
        "In addition: ",
        "Warning message:\n",
        "stop worker failed:\n  'clear_cluster' receive data failed:\n  reached elapsed time limit \n",
        "> ",
        "nrow(exprs(SCdat)",
        "+ ",
        ")",
        "[1] 6789\n",
        "> ",
        "show(SCdat)",
        "ExpressionSet (storageMode: lockedEnvironment)\nassayData: 6789 features, 163 samples \n  element names: exprs \nprotocolData: none\nphenoData\n  sampleNames: BY4741_Stressed_1784042160_C50_BY1 BY4741_Stressed_1784042160_C50_BY10 ...\n    BY4741_Unstressed_1784042189_BY94 (163 total)\n  varLabels: condition\n  varMetadata: labelDescription\nfeatureData: none\nexperimentData: use 'experimentData(object)'\nAnnotation:  \n",
        "> ",
        "y <- exprs(SCdat)[1,]",
        "> ",
        "str(y)",
        " Named num [1:163] 2809 3362 2195 1982 1770 ...\n - attr(*, \"names\")= chr [1:163] \"BY4741_Stressed_1784042160_C50_BY1\" \"BY4741_Stressed_1784042160_C50_BY10\" \"BY4741_Stressed_1784042160_C50_BY11\" \"BY4741_Stressed_1784042160_C50_BY12\" ...\n",
        "> ",
        "out1 <- genefit(y)",
        "> ",
        "str(out1)",
        "List of 3\n $ oa:List of 8\n  ..$ class : num [1:163] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ mean  : num 7.79\n  ..$ var   : num 0.163\n  ..$ df    : num 2\n  ..$ n     : int 163\n  ..$ bic   : Named num -177\n  .. ..- attr(*, \"names\")= chr \"V,1\"\n  ..$ loglik: num -83.6\n  ..$ model : chr \"X\"\n $ c1:List of 8\n  ..$ class : num [1:80] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ mean  : num 7.77\n  ..$ var   : num 0.13\n  ..$ df    : num 2\n  ..$ n     : int 80\n  ..$ bic   : Named num -72.5\n  .. ..- attr(*, \"names\")= chr \"V,1\"\n  ..$ loglik: num ",
        "-31.9\n  ..$ model : chr \"X\"\n $ c2:List of 8\n  ..$ class : num [1:83] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ mean  : num 7.81\n  ..$ var   : num 0.195\n  ..$ df    : num 2\n  ..$ n     : int 83\n  ..$ bic   : Named num -109\n  .. ..- attr(*, \"names\")= chr \"V,1\"\n  ..$ loglik: num -49.9\n  ..$ model : chr \"X\"\n",
        "> ",
        "y <- exprs(SCdat[1:2,])",
        "> ",
        "str(y)",
        " num [1:2, 1:163] 2809 246 3362 226 2195 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : chr [1:2] \"ERCC-00002\" \"ERCC-00003\"\n  ..$ : chr [1:163] \"BY4741_Stressed_1784042160_C50_BY1\" \"BY4741_Stressed_1784042160_C50_BY10\" \"BY4741_Stressed_1784042160_C50_BY11\" \"BY4741_Stressed_1784042160_C50_BY12\" ...\n",
        "> ",
        "out <- bplapply(1:2, function(x) genefit(y))",
        "Error: BiocParallel errors\n  element index: 1, 2\n  first error: NA/NaN/Inf in foreign function call (arg 1)\n",
        "> ",
        "range(exprs(SCdat))",
        "[1]     0.00 22445.63\n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2
    ]
}